name: Catch and Flow

on: [ push, pull_request ]

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      checks: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - uses: LoliGothick/rustfmt-check@nightly
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          flags: --all
          args: --config-path=./.cargo-husky/hooks/rustfmt.toml

  deny:
    name: Run cargo-deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          rust-version: stable
          log-level: warn
          command: check
          arguments: --all-features

  lint-and-test:
    needs: [ rustfmt, deny ]
    name: "Test on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest

    env:
      RUST_BACKTRACE: full

    steps:
      - uses: actions/checkout@v4
      - if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: echo "RUST_VERSION=$(sed -n 's/channel = "\(.*\)\"/\1/p' rust-toolchain.toml)" >> $GITHUB_ENV
      - if: matrix.os == 'windows-latest'
        run: echo "RUST_VERSION=$((Select-String -Path rust-toolchain.toml -Pattern '(?<=channel = ").*(?=")').Matches.Value)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy, rustfmt

      - uses: mozilla-actions/sccache-action@v0.0.8
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        with:
          version: "v0.9.1"

      - name: Configure Cache Env
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-review'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clippy_flags: -- -Dwarning

      - name: Run test suite
        run: cargo test --all-features
